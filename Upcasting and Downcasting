// 1. Person and Student Classes

class Person {
    String name;

    Person(String name) {
        this.name = name;
    }

    void introduce() {
        System.out.println("Hi, I'm " + name);
    }
}

class Student extends Person {
    int id;

    Student(String name, int id) {
        super(name);
        this.id = id;
    }

    void study() {
        System.out.println(name + " is studying. ID: " + id);
    }
}

public class Main {
    public static void main(String[] args) {
        // Upcasting Student to Person
        Person p = new Student("Alice", 101);

        // Accessing Person's method
        p.introduce();

        // Downcasting back to Student
        if (p instanceof Student) {
            Student s = (Student) p;
            s.study(); // accessing Student-specific method
        }

        System.out.println("\n--- Flyable Example ---");

        // 2. Flyable Interface and Implementing Classes
        Flyable[] flyers = new Flyable[2];
        flyers[0] = new Bird("Eagle");
        flyers[1] = new Airplane("Boeing 747");

        for (Flyable f : flyers) {
            f.fly();

            if (f instanceof Bird) {
                Bird b = (Bird) f;
                b.sing();
            } else if (f instanceof Airplane) {
                Airplane a = (Airplane) f;
                a.engineSound();
            }
        }
    }
}

// Flyable Interface
interface Flyable {
    void fly();
}

// Bird Class
class Bird implements Flyable {
    String type;

    Bird(String type) {
        this.type = type;
    }

    public void fly() {
        System.out.println(type + " is flying in the sky.");
    }

    void sing() {
        System.out.println(type + " is singing!");
    }
}

// Airplane Class
class Airplane implements Flyable {
    String model;

    Airplane(String model) {
        this.model = model;
    }

    public void fly() {
        System.out.println(model + " is flying in the air.");
    }

    void engineSound() {
        System.out.println(model + " engine roaring!");
    }
}
